import React, { Component } from "react";
import axios from "axios";
import environment from "../environment";
import {
	IonAccordion,
	IonAccordionGroup,
	IonAlert,
	IonContent,
	IonItem,
	IonLabel,
	IonRefresher,
	IonRefresherContent,
	IonToast,
	RefresherEventDetail,
} from "@ionic/react";
import FillStockHistoryAccordion from "./FillStockHistoryAccordion";

interface changeHistoryProps {
	type: string;
}

/**
 * @class ChangeHistory
 * @extends React.Component
 * @param {string} type - The type of stockchanges to be displayed.
 * @description     This class displays a list of stockchanges in an accordion.
 *                  It receives the type of stockchanges to be displayed as a prop.
 *                  It fetches the stockchanges from the API and creates for each stockchange an accordion with the stockchange details.
 *                  Details are generated by the {@link FillStockHistoryAccordion} component.
 */

class ChangeHistory extends Component<changeHistoryProps> {
	state = {
		// Holds data in the component
		stocks: [], // Holds the list of stockchanges
		toastIsOpen: false, // Tracks the visibility of the toast
		toastMessage: "", // Holds the message to be displayed in the toast
		toastDuration: 0, // Holds the duration for which the toast should be visible
		alert401IsOpen: false, // Tracks the visibility of the 401 alert
		alert401Message: "", // Holds the message to be displayed in the 401 alert
		alert401subHeader: "",
		alert401Route: "",
	};

	componentDidMount() {
		// Lifecycle method - When the component is mounted (on the screen)
		this.getStocks();

	}

	/**
	 * Fetches stock data from the API and updates the component's state.
	 * @function getStocks
	 * @description  This function makes an HTTP GET request to retrieve stockhistory data from the API based on the `type`.
	 *               It updates the component's state `stocks` with the received data. If an error occurs,
	 *               appropriate error handling is performed based on the response status code.
	 *
	 *               If User is unauthorized, {@link handle401} is called. If other error, a toast is displayed with the error message sent by the API.
	 */
	getStocks() {
		axios
			.get(environment.apiUrl + "/getStockhistory.php", {
				...environment.config, // Spread Operator to merge the two objects and ensure that both are included in the request
				params: {
					type: this.props.type,
				},
			})
			.then((response) => {
				this.checkForUserAuthentication();
				this.setState({ stocks: response.data });
			})
			.catch((error) => {
				if (error.response.status === 401) {
					this.handle401(error);
				} else {
					this.setToast(
						true,
						error.message + " " + error.response.data.message,
						10000
					);
				}
			});
	}

	/**
	 * Sets the state to control the toast component.
	 * @function setToast
	 * @param {boolean} isOpen - Indicates whether the toast should be displayed (`true`) or hidden (`false`).
	 * @param {string} message - The message to be displayed in the toast. Optional, defaults to an empty string if not provided.
	 * @param {number} duration - The duration in milliseconds for which the toast should be visible. Optional, defaults to 0 if not provided.
	 */
	setToast(isOpen: boolean, message?: string, duration?: number) {
		this.setState({
			toastIsOpen: isOpen,
			toastMessage: message,
			toastDuration: duration,
		});
	}

    checkForUserAuthentication() {
        console.log("Checking for user authentication");
        if(!localStorage.userId || !localStorage.token) {
            this.setState({alert401IsOpen: true, alert401Message: "Please log in again.", alert401subHeader: "Unauthorized Access.", alert401Route: "/page/Login"});
        }
        if(localStorage.userId != `"1"`) {
            switch(localStorage.userId) {
                case `"2"`:
                    this.setState({alert401IsOpen: true, alert401Message: "Redirecting", alert401subHeader: "Insufficient Permission.", alert401Route: "/page/Stock"});
                    break;
                default: 
                    this.setState({alert401IsOpen: true, alert401Message: "Please log in again.", alert401subHeader: "Unauthorized Access.", alert401Route: "/page/Login"});
                    break;
            }    
        }
    }

	/**
	 * Handles a 401 error response by showing an alert.
	 * @function handle401
	 * @param {any} error - The error object containing the 401 response.
	 */
	handle401 = (error: any, subheader?: string) => {
        this.setState({alert401IsOpen: true, alert401Message: error.response.data.message, alert401Route: "/page/Login"});
        if(subheader) {
            this.setState({alert401subHeader: subheader});
        } else {
            this.setState({alert401subHeader: "Please log in again."});
        }
    }

	/**
	 * Handles the refresh event of the refresher component.
	 * @function handleRefresh
	 * @param {CustomEvent<RefresherEventDetail>} event - The custom event of the refresher component.
	 * @description  calls {@link getStocks} to refresh the data. Afterwards it completes the refresh event.
	 *
	 */
	handleRefresh = (event: CustomEvent<RefresherEventDetail>) => {
		this.getStocks();
		event.detail.complete();
	};

	render() {
		const { stocks } = this.state;

			return (
				<IonContent className="ion-padding">
					<IonAccordionGroup>
						{stocks.map((stock: any) => (
							<IonAccordion value={stock.id} key={stock.id}>
								<IonItem slot="header" color="light">
									<IonLabel>
										{stock.date} - {stock.type}
									</IonLabel>
								</IonItem>
								<div className="ion-padding" slot="content">
									<FillStockHistoryAccordion
										changeId={stock.id}
										type={stock.type}
									/>
								</div>
							</IonAccordion>
						))}
					</IonAccordionGroup>
					{/* Renders an IonToast component with dynamic duration and messages */}
					<IonToast
						isOpen={this.state.toastIsOpen}
						onDidDismiss={() => this.setToast(false)}
						message={this.state.toastMessage}
						duration={this.state.toastDuration}
					/>
					{/* Renders an IonAlert component to diplay an unauthorized access message */}
					<IonAlert
						isOpen={this.state.alert401IsOpen}
						onDidDismiss={() => {
							this.setState({ alert401IsOpen: false });
							if(this.state.alert401Route == "/page/Login") {
								localStorage.clear();
							}
							window.location.href = this.state.alert401Route;
						}}
						header="Unauthorized Access"
						subHeader={this.state.alert401subHeader}
						message={this.state.alert401Message}
						buttons={["OK"]}
					/>
					<IonRefresher
						slot="fixed"
						onIonRefresh={this.handleRefresh}
					>
						<IonRefresherContent></IonRefresherContent>
					</IonRefresher>
				</IonContent>
			);
		}
	}


export default ChangeHistory;
